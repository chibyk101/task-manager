# "A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

# "Indicates what fields are available at the top level of a query operation."
type Query {
    # "Find a single user by an identifying attribute."
    user(
    #   "Search by primary key."
      id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])

    #   "Search by email address."
      email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find

    # "List multiple users."
    users(
    #   "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
      name: String @where(operator: "like")
    ): [User!]! @all

    tasks(status: String): [Task!]! @guard
    me: User @auth @guard
    taskCategories: [TaskCategory!]! @guard
    viewTask (id: ID!): Task @guard
    
}

# "Account of a person who utilizes this application."
type User {
    id: ID!
    name: String!
    email: String!
    email_verified_at: DateTime
    created_at: DateTime!
    updated_at: DateTime!
    tasks: [Task!]! @hasMany
    taskCategories: [TaskCategory!]! @hasMany
}

type Task {
    id: ID!
    user_id: Int
    title: String!
    description: String
    due_date: String
    status: String
    created_at: DateTime!
    updated_at: DateTime!
    user: User! @belongsTo 
    category: TaskCategory @belongsTo
    is_almost_due: Boolean
    is_due: Boolean
}

type TaskCategory {
    id: ID!
    name: String
    user_id: Int
    user: User! @belongsTo
    tasks: [Task!]! @hasMany
    created_at: DateTime!
    updated_at: DateTime!
}

type Mutation {
#   "Log in to a new session and get the user."
  login(
    email: String @rules(apply: ["required","email"]),
    password: String @rules(apply: ["required"])
     ): String!

#   "Log out from the current session, showing the user one last time."
  logout: User @guard

  registerUser(name: String @rules(apply: ["required"]), email: String @rules(apply: ["required","email","unique:users"]), password: String @rules(apply: ["required"])): String
  updateProfile(name: String, email: String): User

  createTaskCategory(name: String @rules(apply: ["required"])): TaskCategory! @guard
  updateTaskCategory(id: ID!, name: String): TaskCategory @guard
  deleteTaskCategory(id: ID): TaskCategory @guard

  createTask(task_category_id: Int, title: String @rules(apply: ["required"]), description:String, due_date: String @rules(apply: ["required","date","after_or_equal:today"])): Task! @guard
  updateTask(id: ID!, task_category_id: Int, title: String, description:String, due_date: String): Task @guard
  deleteTask(id: ID!): Task @guard
}
